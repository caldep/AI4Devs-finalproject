package com.spme.maintenance.domain.model;

import java.time.LocalDateTime;
import javax.validation.constraints.NotBlank;
import com.spme.maintenance.domain.validation.ExistingEquipment;

import com.amazonaws.services.dynamodbv2.datamodeling.*;
import org.springframework.data.annotation.Id;
import lombok.Data;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.datatype.jsr310.ser.LocalDateTimeSerializer;
import com.fasterxml.jackson.datatype.jsr310.deser.LocalDateTimeDeserializer;

@Data
@DynamoDBTable(tableName = "Measurement")
public class Measurement {
    @JsonProperty("id")
    @Id
    @DynamoDBHashKey
    @DynamoDBAutoGeneratedKey
    private String id;

    @JsonProperty("equipmentId")
    @NotBlank(message = "El ID del equipo es obligatorio")
    @ExistingEquipment(message = "El ID del equipo debe existir en la tabla Equipment")
    @DynamoDBAttribute
    private String equipmentId;

    @JsonProperty("registrationDate")
    @DynamoDBTypeConverted(converter = LocalDateTimeConverter.class)
    @DynamoDBAttribute
    @JsonSerialize(using = LocalDateTimeSerializer.class)
    @JsonDeserialize(using = LocalDateTimeDeserializer.class)
    private LocalDateTime registrationDate;

    @JsonProperty("frequency")
    @DynamoDBAttribute
    private double frequency;

    @JsonProperty("current")
    @DynamoDBAttribute
    private double current;

    @JsonProperty("internalPressure")
    @DynamoDBAttribute
    private double internalPressure;

    @JsonProperty("externalPressure")
    @DynamoDBAttribute
    private double externalPressure;

    @JsonProperty("internalTemperature")
    @DynamoDBAttribute
    private double internalTemperature;

    @JsonProperty("externalTemperature")
    @DynamoDBAttribute
    private double externalTemperature;

    @JsonProperty("vibrationX")
    @DynamoDBAttribute
    private double vibrationX;

    // Converter para LocalDateTime
    public static class LocalDateTimeConverter implements DynamoDBTypeConverter<String, LocalDateTime> {
        @Override
        public String convert(LocalDateTime time) {
            return time.toString();
        }

        @Override
        public LocalDateTime unconvert(String s) {
            return LocalDateTime.parse(s);
        }
    }
}
